Index: app/src/main/java/com/comp3350_group10/bookstore/persistence/hsqldb/BookDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * HSQLDB Book Database\r\n */\r\n\r\npackage com.comp3350_group10.bookstore.persistence.hsqldb;\r\nimport com.comp3350_group10.bookstore.objects.Book;\r\nimport com.comp3350_group10.bookstore.persistence.IBook;\r\nimport com.comp3350_group10.bookstore.persistence.IBookDatabase;\r\n\r\nimport java.util.ArrayList;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\nimport java.sql.SQLException;\r\nimport java.sql.PreparedStatement;\r\nimport java.util.List;\r\n\r\n\r\npublic class BookDatabase implements IBookDatabase {\r\n\r\n\r\n    private List<IBook> bookList;\r\n\r\n    private Connection connection() throws SQLException{\r\n        return DriverManager.getConnection(\"jdbc:hsqldb:file:BS.script;shutdown=true\", \"SA\", \"\");\r\n    }\r\n\r\n    private Book createBook(final ResultSet rs) throws SQLException{\r\n        final String bookName = rs.getString(\"bookName\");\r\n        final String isbn = rs.getString(\"isbn\");\r\n        final int quantity = rs.getInt(\"quantity\");\r\n        final int price = rs.getInt(\"price\");\r\n        final String date = rs.getString(\"date\");\r\n        final String author = rs.getString(\"author\");\r\n        final String genre = rs.getString(\"genre\");\r\n        final int reserve = rs.getInt(\"reserve\");\r\n        final int imageReference = rs.getInt(\"image\");\r\n\r\n        return new Book(bookName, isbn, quantity, price, date, author, genre, reserve, imageReference);\r\n    }\r\n\r\n\r\n    /**\r\n     * findBooks: Finds and returns the book objects based on their book ISBN\r\n     * @param searchTerm\r\n     * @return\r\n     */\r\n    public List<IBook> findBook(String searchTerm) {\r\n\r\n        //Lists which contains book objects related to specific search terms\r\n        List<IBook> findByISBN  = findByISBN(searchTerm);\r\n        List<IBook> findByAuthor = new ArrayList<>();// = findByAuthor(searchTerm);\r\n        List<IBook> findByTitle = new ArrayList<>();// = findByTitle(searchTerm);\r\n\r\n        //Filtering by removing duplicates and adding them all into a single list which has elements of the search term\r\n        List<IBook> bookResult = new ArrayList<>();\r\n\r\n        for(IBook book: findByISBN){\r\n            if(!bookResult.contains(book)){\r\n                bookResult.add(book);\r\n            }\r\n        }\r\n        for(IBook book: findByAuthor){\r\n            if(!bookResult.contains(book)){\r\n                bookResult.add(book);\r\n            }\r\n        }\r\n        for(IBook book: findByTitle){\r\n            if(!bookResult.contains(book)){\r\n                bookResult.add(book);\r\n            }\r\n        }\r\n\r\n        return bookResult;\r\n    }\r\n\r\n    /**\r\n     * findByISBN: Finds books from our bookList by ISBN\r\n     * @param isbn\r\n     */\r\n    private List<IBook> findByISBN(String isbn) {\r\n        List<IBook> bookIsbn = getBooks();\r\n        if(isbn != null){\r\n            //Going through all the bookList\r\n            for(IBook book: bookList){\r\n                //If the string inputted matches any of the strings in the our bookList, then add that to our local list\r\n                if(book.getBookIsbn().startsWith(isbn)){\r\n                    bookIsbn.add(book);\r\n                }\r\n            }\r\n        }\r\n        return bookIsbn;\r\n    }\r\n\r\n    /**\r\n     * findByAuthor: Finds books from our bookList by author\r\n     * @param author\r\n     */\r\n    private List<IBook> findByAuthor(String author) {\r\n        List<IBook> bookAuthor = getBooks();\r\n        String[] split;\r\n        if(author != null){\r\n            //Going through all the bookList\r\n            for(IBook book: bookList) {\r\n                //***CHANGED***:\r\n                // now instead of pulling whole string and try to match with the search term,\r\n                // we split the term by delimeters and try to match each search term with each data term\r\n                //e.g. \"J. K. Rowling\" now becomes \"J\", \"K\", \"Rowling\" so if we search \"Rowling\" it now matches\r\n                split = book.getBookAuthor().toLowerCase().split(\"[-. ,:]+\");\r\n                for(String splitTerm: split){\r\n                    //If the string inputted matches any of the terms in the book's author name, then add that book to our return list\r\n                    if (splitTerm.startsWith(author)) {\r\n                        bookAuthor.add(book);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bookAuthor;\r\n    }\r\n\r\n    /**\r\n     * findByTitle: Finds books from our bookList by title\r\n     * @param title\r\n     */\r\n    private List<IBook> findByTitle(String title) {\r\n        List<IBook> bookTitle = getBooks();\r\n        String[] split;\r\n\r\n        if(title != null){\r\n            //Going through all the bookList\r\n            for(IBook book: bookList) {\r\n                //***CHANGED***: see findByAuthor for detail\r\n                split = book.getBookName().toLowerCase().split(\"[-. ,:]+\");\r\n                for(String splitTerm: split){\r\n                    //If the string inputted matches any of the terms in the book titles, then add the book to our return list\r\n                    if (splitTerm.startsWith(title)) {\r\n                        bookTitle.add(book);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bookTitle;\r\n    }\r\n\r\n\r\n    @Override\r\n    public List<IBook> getBooks() {\r\n        final List<IBook> books = new ArrayList<>();\r\n\r\n        try (final Connection conn = connection()) {\r\n            final Statement stmt = conn.createStatement();\r\n            final ResultSet rtst = stmt.executeQuery(\"SELECT * FROM BOOKS\");\r\n\r\n            while(rtst.next()){\r\n                final Book book = createBook(rtst);\r\n                books.add(book);\r\n            }\r\n\r\n            rtst.close();\r\n            stmt.close();\r\n        }\r\n\r\n        catch(final SQLException e){\r\n            throw new PersistenceException(e);\r\n        }\r\n        return books;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public IBook insertBook(IBook book) {\r\n\r\n        try(final Connection conn = connection()) {\r\n            final PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO BOOKS VALUES(?,?,?,?,?,?,?,?)\");\r\n            pstmt.setString(1, book.getBookName());\r\n            pstmt.setString(2, book.getBookIsbn());\r\n            pstmt.setInt(3, book.getStock());\r\n            pstmt.setInt(4, book.getPrice());\r\n            pstmt.setString(5, book.getDate());\r\n            pstmt.setString(6, book.getBookAuthor());\r\n            pstmt.setString(7, book.getGenre());\r\n            pstmt.setInt(8, book.getReserve());\r\n            pstmt.setInt(9, book.getImage());\r\n            pstmt.executeUpdate();\r\n\r\n            return book;\r\n        }\r\n        catch(final SQLException e){\r\n            throw new PersistenceException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void updateBook(IBook book) {\r\n\r\n        try (final Connection conn = connection()){\r\n            final PreparedStatement pstmt = conn.prepareStatement(\"UPDATE BOOKS SET quantity=?,price=?, reserve=? WHERE isbn = ?\");\r\n            pstmt.setInt(1, book.getStock());\r\n            pstmt.setInt(2, book.getPrice());\r\n            pstmt.setInt(3, book.getReserve());\r\n            pstmt.setString(4, book.getBookIsbn());\r\n            pstmt.executeUpdate();\r\n        }\r\n        catch(final SQLException e){\r\n            throw new PersistenceException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void deleteBook(IBook book) {\r\n\r\n        try(final Connection conn = connection()){\r\n            final PreparedStatement pstmt = conn.prepareStatement(\"DELETE FROM BOOKS WHERE isbn=?\");\r\n            pstmt.setString(1, book.getBookIsbn());\r\n            pstmt.executeUpdate();\r\n        }\r\n        catch(final SQLException e){\r\n            throw new PersistenceException(e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/persistence/hsqldb/BookDatabase.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/persistence/hsqldb/BookDatabase.java	(date 1616555123711)
@@ -3,221 +3,52 @@
  */
 
 package com.comp3350_group10.bookstore.persistence.hsqldb;
-import com.comp3350_group10.bookstore.objects.Book;
+
 import com.comp3350_group10.bookstore.persistence.IBook;
 import com.comp3350_group10.bookstore.persistence.IBookDatabase;
+import com.comp3350_group10.bookstore.presentation.MainActivity;
 
-import java.util.ArrayList;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.ResultSet;
-import java.sql.Statement;
-import java.sql.SQLException;
-import java.sql.PreparedStatement;
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+
 import java.util.List;
 
+import static android.content.Context.*;
+
 
 public class BookDatabase implements IBookDatabase {
 
-
-    private List<IBook> bookList;
-
-    private Connection connection() throws SQLException{
-        return DriverManager.getConnection("jdbc:hsqldb:file:BS.script;shutdown=true", "SA", "");
+    public BookDatabase() {
+        SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase()
     }
-
-    private Book createBook(final ResultSet rs) throws SQLException{
-        final String bookName = rs.getString("bookName");
-        final String isbn = rs.getString("isbn");
-        final int quantity = rs.getInt("quantity");
-        final int price = rs.getInt("price");
-        final String date = rs.getString("date");
-        final String author = rs.getString("author");
-        final String genre = rs.getString("genre");
-        final int reserve = rs.getInt("reserve");
-        final int imageReference = rs.getInt("image");
-
-        return new Book(bookName, isbn, quantity, price, date, author, genre, reserve, imageReference);
-    }
-
-
-    /**
-     * findBooks: Finds and returns the book objects based on their book ISBN
-     * @param searchTerm
-     * @return
-     */
-    public List<IBook> findBook(String searchTerm) {
-
-        //Lists which contains book objects related to specific search terms
-        List<IBook> findByISBN  = findByISBN(searchTerm);
-        List<IBook> findByAuthor = new ArrayList<>();// = findByAuthor(searchTerm);
-        List<IBook> findByTitle = new ArrayList<>();// = findByTitle(searchTerm);
-
-        //Filtering by removing duplicates and adding them all into a single list which has elements of the search term
-        List<IBook> bookResult = new ArrayList<>();
-
-        for(IBook book: findByISBN){
-            if(!bookResult.contains(book)){
-                bookResult.add(book);
-            }
-        }
-        for(IBook book: findByAuthor){
-            if(!bookResult.contains(book)){
-                bookResult.add(book);
-            }
-        }
-        for(IBook book: findByTitle){
-            if(!bookResult.contains(book)){
-                bookResult.add(book);
-            }
-        }
-
-        return bookResult;
-    }
-
-    /**
-     * findByISBN: Finds books from our bookList by ISBN
-     * @param isbn
-     */
-    private List<IBook> findByISBN(String isbn) {
-        List<IBook> bookIsbn = getBooks();
-        if(isbn != null){
-            //Going through all the bookList
-            for(IBook book: bookList){
-                //If the string inputted matches any of the strings in the our bookList, then add that to our local list
-                if(book.getBookIsbn().startsWith(isbn)){
-                    bookIsbn.add(book);
-                }
-            }
-        }
-        return bookIsbn;
-    }
-
-    /**
-     * findByAuthor: Finds books from our bookList by author
-     * @param author
-     */
-    private List<IBook> findByAuthor(String author) {
-        List<IBook> bookAuthor = getBooks();
-        String[] split;
-        if(author != null){
-            //Going through all the bookList
-            for(IBook book: bookList) {
-                //***CHANGED***:
-                // now instead of pulling whole string and try to match with the search term,
-                // we split the term by delimeters and try to match each search term with each data term
-                //e.g. "J. K. Rowling" now becomes "J", "K", "Rowling" so if we search "Rowling" it now matches
-                split = book.getBookAuthor().toLowerCase().split("[-. ,:]+");
-                for(String splitTerm: split){
-                    //If the string inputted matches any of the terms in the book's author name, then add that book to our return list
-                    if (splitTerm.startsWith(author)) {
-                        bookAuthor.add(book);
-                    }
-                }
-            }
-        }
-        return bookAuthor;
-    }
-
-    /**
-     * findByTitle: Finds books from our bookList by title
-     * @param title
-     */
-    private List<IBook> findByTitle(String title) {
-        List<IBook> bookTitle = getBooks();
-        String[] split;
-
-        if(title != null){
-            //Going through all the bookList
-            for(IBook book: bookList) {
-                //***CHANGED***: see findByAuthor for detail
-                split = book.getBookName().toLowerCase().split("[-. ,:]+");
-                for(String splitTerm: split){
-                    //If the string inputted matches any of the terms in the book titles, then add the book to our return list
-                    if (splitTerm.startsWith(title)) {
-                        bookTitle.add(book);
-                    }
-                }
-            }
-        }
-        return bookTitle;
-    }
-
 
     @Override
-    public List<IBook> getBooks() {
-        final List<IBook> books = new ArrayList<>();
-
-        try (final Connection conn = connection()) {
-            final Statement stmt = conn.createStatement();
-            final ResultSet rtst = stmt.executeQuery("SELECT * FROM BOOKS");
-
-            while(rtst.next()){
-                final Book book = createBook(rtst);
-                books.add(book);
-            }
-
-            rtst.close();
-            stmt.close();
-        }
-
-        catch(final SQLException e){
-            throw new PersistenceException(e);
-        }
-        return books;
+    public List<IBook> findBook(String searchTerm) throws ClassNotFoundException
+    {
+        return null;
     }
-
-
 
     @Override
-    public IBook insertBook(IBook book) {
-
-        try(final Connection conn = connection()) {
-            final PreparedStatement pstmt = conn.prepareStatement("INSERT INTO BOOKS VALUES(?,?,?,?,?,?,?,?)");
-            pstmt.setString(1, book.getBookName());
-            pstmt.setString(2, book.getBookIsbn());
-            pstmt.setInt(3, book.getStock());
-            pstmt.setInt(4, book.getPrice());
-            pstmt.setString(5, book.getDate());
-            pstmt.setString(6, book.getBookAuthor());
-            pstmt.setString(7, book.getGenre());
-            pstmt.setInt(8, book.getReserve());
-            pstmt.setInt(9, book.getImage());
-            pstmt.executeUpdate();
-
-            return book;
-        }
-        catch(final SQLException e){
-            throw new PersistenceException(e);
-        }
+    public List<IBook> getBooks() throws ClassNotFoundException
+    {
+        return null;
     }
 
     @Override
-    public void updateBook(IBook book) {
-
-        try (final Connection conn = connection()){
-            final PreparedStatement pstmt = conn.prepareStatement("UPDATE BOOKS SET quantity=?,price=?, reserve=? WHERE isbn = ?");
-            pstmt.setInt(1, book.getStock());
-            pstmt.setInt(2, book.getPrice());
-            pstmt.setInt(3, book.getReserve());
-            pstmt.setString(4, book.getBookIsbn());
-            pstmt.executeUpdate();
-        }
-        catch(final SQLException e){
-            throw new PersistenceException(e);
-        }
+    public IBook insertBook(IBook book) throws ClassNotFoundException
+    {
+        return null;
     }
 
     @Override
-    public void deleteBook(IBook book) {
+    public void updateBook(IBook book) throws ClassNotFoundException
+    {
 
-        try(final Connection conn = connection()){
-            final PreparedStatement pstmt = conn.prepareStatement("DELETE FROM BOOKS WHERE isbn=?");
-            pstmt.setString(1, book.getBookIsbn());
-            pstmt.executeUpdate();
-        }
-        catch(final SQLException e){
-            throw new PersistenceException(e);
-        }
+    }
+
+    @Override
+    public void deleteBook(IBook book) throws ClassNotFoundException
+    {
+
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/comp3350_group10/bookstore/presentation/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.comp3350_group10.bookstore.presentation;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.TableLayout;\r\nimport com.comp3350_group10.bookstore.R;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\n\r\nimport com.comp3350_group10.bookstore.application.Main;\r\nimport com.comp3350_group10.bookstore.application.Service;\r\nimport com.comp3350_group10.bookstore.business.UI_Handler.ButtonFunctions;\r\nimport com.comp3350_group10.bookstore.business.UI_Handler.IButtonFunctions;\r\nimport com.comp3350_group10.bookstore.business.UI_Handler.TrendingPageFunctions;\r\n\r\npublic class MainActivity extends AppCompatActivity\r\n{\r\n    private IButtonFunctions uIButtonFunctions;\r\n    private TableLayout bookListTable;\r\n    private EditText searchBar;\r\n    private Spinner dropdown;\r\n    private Button sortButton;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n//        Main.setDBPath(\"./assets/db/book.script\");\r\n//        Service.setupBookDatabase();\r\n        uIButtonFunctions = new ButtonFunctions();\r\n        searchBar = findViewById(R.id.searchBar);\r\n        bookListTable = findViewById(R.id.bookListTable);\r\n        dropdown = findViewById(R.id.dropdown);\r\n        sortButton = findViewById(R.id.sortingButton);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n\r\n        setSupportActionBar(toolbar);\r\n\r\n        SetSearchListener(getBaseContext(), this);\r\n        try {\r\n            FillTrendingTable();\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        FillDropdownList();\r\n    }\r\n\r\n    private void FillDropdownList() {\r\n        String[] items = new String[] {\"By Title\", \"By Author\", \"By Genre\"};\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, R.layout.support_simple_spinner_dropdown_item, items);\r\n        dropdown.setAdapter(adapter);\r\n    }\r\n\r\n    public void FillTrendingTable() throws ClassNotFoundException {\r\n        TrendingPageFunctions.FillTrendingPage(bookListTable, this);\r\n    }\r\n\r\n    private void SetSearchListener(Context context, MainActivity main) {\r\n        searchBar.addTextChangedListener(new TextWatcher() {\r\n            public void afterTextChanged(Editable s) { }\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) { }\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                try {\r\n                    uIButtonFunctions.SearchButtonPressed(s.toString(), bookListTable, context, main, sortButton.getText().toString(), (String)dropdown.getSelectedItem());\r\n                } catch (ClassNotFoundException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().inflate(R.menu.main, menu);\r\n        return true;\r\n    }\r\n\r\n    public void onLoginButtonClicked(MenuItem item) {\r\n        uIButtonFunctions.SwitchToLoginActivity(this, getBaseContext());\r\n    }\r\n\r\n    public void onLogoutButtonClicked(MenuItem item)\r\n    {\r\n        uIButtonFunctions.LogoutButtonPressed();\r\n    }\r\n\r\n    public void userSettingButtonClicked(MenuItem item){ uIButtonFunctions.UserSettingButtonPressed(getBaseContext(), this); }\r\n\r\n    public void onSortButtonClicked(View v) {\r\n        Button b = (Button)v;\r\n        if (b.getText().toString().equals(\"DESC\"))\r\n            b.setText(\"ASC\");\r\n        else b.setText(\"DESC\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/presentation/MainActivity.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/presentation/MainActivity.java	(date 1616550695364)
@@ -16,8 +16,6 @@
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.Toolbar;
 
-import com.comp3350_group10.bookstore.application.Main;
-import com.comp3350_group10.bookstore.application.Service;
 import com.comp3350_group10.bookstore.business.UI_Handler.ButtonFunctions;
 import com.comp3350_group10.bookstore.business.UI_Handler.IButtonFunctions;
 import com.comp3350_group10.bookstore.business.UI_Handler.TrendingPageFunctions;
@@ -29,14 +27,13 @@
     private EditText searchBar;
     private Spinner dropdown;
     private Button sortButton;
+    private static MainActivity mainActivity;
 
     @Override
     protected void onCreate(Bundle savedInstanceState)
     {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
-//        Main.setDBPath("./assets/db/book.script");
-//        Service.setupBookDatabase();
         uIButtonFunctions = new ButtonFunctions();
         searchBar = findViewById(R.id.searchBar);
         bookListTable = findViewById(R.id.bookListTable);
@@ -44,6 +41,8 @@
         sortButton = findViewById(R.id.sortingButton);
         Toolbar toolbar = findViewById(R.id.toolbar);
 
+        mainActivity = this;
+
         setSupportActionBar(toolbar);
 
         SetSearchListener(getBaseContext(), this);
@@ -103,4 +102,8 @@
             b.setText("ASC");
         else b.setText("DESC");
     }
+
+    public static MainActivity getMainActivity() {
+        return mainActivity;
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/BookDataHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.comp3350_group10.bookstore.business.Data_Handler;\r\n\r\nimport android.os.Build;\r\n\r\nimport androidx.annotation.RequiresApi;\r\n\r\n\r\nimport com.comp3350_group10.bookstore.application.Main;\r\nimport com.comp3350_group10.bookstore.application.Service;\r\nimport com.comp3350_group10.bookstore.persistence.IUserDatabase;\r\nimport com.comp3350_group10.bookstore.persistence.hsqldb.BookDatabase;\r\nimport com.comp3350_group10.bookstore.persistence.IBook;\r\nimport com.comp3350_group10.bookstore.persistence.IBookDatabase;\r\nimport com.comp3350_group10.bookstore.objects.User;\r\nimport com.comp3350_group10.bookstore.persistence.hsqldb.UserDatabase;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map.Entry;\r\n\r\n\r\npublic class BookDataHandler implements IBookDataHandler {\r\n//    private IUserDatabase userDatabase = new UserDatabase(Main.getDBPath());\r\n    private IBookDatabase bookDatabase;    //TODO: constructor expecting path\r\n    public static IBook currentBook;\r\n\r\n    public BookDataHandler(){\r\n        bookDatabase = Service.setupBookDatabase();\r\n    }\r\n\r\n    //Takes the keyword and search database with it\r\n    //Returns result after removing duplicated results, and sorted by relevance\r\n    /*\r\n     * param keyword\r\n     * return list of found books\r\n     * */\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    public List<IBook> findBooks(String keyword) throws ClassNotFoundException {\r\n        List<String> wordList = splitWords(keyword); //splits keywords\r\n\r\n        List<IBook> bookList = new ArrayList<>();   //stores search result\r\n\r\n        //search database with each keyword and combining the lists\r\n        for(String word: wordList){\r\n            bookList.addAll(bookDatabase.findBook(word));\r\n        }\r\n\r\n        //sort the booklist by relevancy (times it appeared in search result) and remove duplication\r\n        bookList = sortByRelevancy(bookList);\r\n\r\n        return bookList;\r\n    }\r\n\r\n    //function to set the target book to the given price\r\n    public void setPrice(IBook target, int price){\r\n        //make sure target is initialized\r\n        try\r\n        {\r\n            //price cannot be negative\r\n            if(price>=0){\r\n                target.setPrice(price);\r\n            }\r\n            else{\r\n                System.out.println(\"The price cannot be set to negative number\");\r\n            }\r\n            bookDatabase.updateBook(target);\r\n        }\r\n\r\n        catch(NullPointerException | ClassNotFoundException e)\r\n        {\r\n            System.out.println(e+\"caught in UserDataHandler.java method - setPrice()\");\r\n        }\r\n    }\r\n\r\n\r\n    //function to increment the price by 1\r\n    public void incrementPrice(IBook target) {\r\n        try {\r\n            setPrice(target, target.getPrice() + 1);\r\n        } catch (NullPointerException e) {\r\n            System.out.println(e + \"caught in UserDataHandler.java method - incrementPrice()\");\r\n        }\r\n    }\r\n\r\n    //function to decrement price by 1\r\n    public void decrementPrice(IBook target){\r\n        try{\r\n            setPrice(target, target.getPrice()-1);\r\n        }\r\n        catch (NullPointerException e) {\r\n            System.out.println(e + \"caught in UserDataHandler.java method - decrementPrice()\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //function set the stock for the target book with the given quantity\r\n    public void setStock(IBook target, int quantity) throws ClassNotFoundException {\r\n        //make sure target is initialized\r\n        try{\r\n            //stock cannot be negative\r\n            if(quantity >= 0){\r\n                target.setStock(quantity);\r\n            }\r\n            else{\r\n                System.out.println(\"The stock cannot be set to negative number\");\r\n            }\r\n            bookDatabase.updateBook(target);\r\n        }\r\n        catch(NullPointerException e)\r\n        {\r\n            System.out.println(e+\"caught in UserDataHandler.java method - setStock()\");\r\n        }\r\n    }\r\n\r\n\r\n    //function to increment the stock by 1\r\n    public void incrementStock(IBook target) {\r\n        //make sure target is initialized\r\n        try {\r\n            setStock(target, target.getStock() + 1);\r\n        }\r\n        catch (NullPointerException | ClassNotFoundException e) {\r\n            System.out.println(e + \"caught in UserDataHandler.java method - incrementStock()\");\r\n        }\r\n    }\r\n\r\n\r\n    //function to decrement the stock by 1\r\n    public void decrementStock(IBook target){\r\n        //Make sure target is initialized and do not decrease if stock is less than 0\r\n        try {\r\n            setStock(target, target.getStock() - 1);\r\n        }\r\n        catch (NullPointerException | ClassNotFoundException e) {\r\n            System.out.println(e + \"caught in DataHandler.java method - decrementStock()\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Takes a list of books with duplication, the more duplicated the book the\r\n    //Sort the given list of books by how many words in its title matches with the given word list\r\n    //And gets rid of the duplicated elements\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    private List<IBook> sortByRelevancy(List<IBook> bookList){\r\n        //relevancy is determined by # of times the book appeared in search result\r\n        //<Key : Value> = <IBook book : Integer relevancy>\r\n        HashMap<IBook,Integer> map = new HashMap<>();\r\n        for (IBook book : bookList) {\r\n            if (!map.containsKey(book)) {\r\n                map.put(book, 1);\r\n            }\r\n            else{\r\n                map.put(book, map.get(book)+1);\r\n                //TODO: Warning:(195, 31) Unboxing of 'map.get(book)' may produce 'NullPointerException'\r\n            }\r\n        }\r\n\r\n        //descending sort by relevancy\r\n        List<Entry<IBook, Integer>> sortedBookList = new ArrayList<>(map.entrySet());\r\n        sortedBookList.sort(Entry.<IBook, Integer>comparingByValue().reversed());\r\n\r\n        //copies the sorted list to list of books to return\r\n        List<IBook> result = new ArrayList<>();\r\n        for(Entry<IBook, Integer> entries: sortedBookList){\r\n            result.add(entries.getKey());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    // splits the given string, ignores non-ascii words\r\n    private List<String> splitWords(String words){\r\n        //split input\r\n        String[] split = words.toLowerCase().split(\"[-. ,:]+\");\r\n\r\n        //initialize returning list\r\n        List<String> result = new ArrayList<>();\r\n\r\n        //ignore non-ascii and common words\r\n        for(String word:split) {\r\n            if(word.matches(\"\\\\A\\\\p{ASCII}*\\\\z\")){\r\n                result.add(word);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n\r\n    // TODO: Take care of IUserDatabase bugs after it's implemented\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/BookDataHandler.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/BookDataHandler.java	(date 1616554521973)
@@ -5,14 +5,8 @@
 import androidx.annotation.RequiresApi;
 
 
-import com.comp3350_group10.bookstore.application.Main;
-import com.comp3350_group10.bookstore.application.Service;
-import com.comp3350_group10.bookstore.persistence.IUserDatabase;
-import com.comp3350_group10.bookstore.persistence.hsqldb.BookDatabase;
 import com.comp3350_group10.bookstore.persistence.IBook;
 import com.comp3350_group10.bookstore.persistence.IBookDatabase;
-import com.comp3350_group10.bookstore.objects.User;
-import com.comp3350_group10.bookstore.persistence.hsqldb.UserDatabase;
 
 
 import java.util.ArrayList;
@@ -27,7 +21,6 @@
     public static IBook currentBook;
 
     public BookDataHandler(){
-        bookDatabase = Service.setupBookDatabase();
     }
 
     //Takes the keyword and search database with it
Index: app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/UserDataHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.comp3350_group10.bookstore.business.Data_Handler;\r\n\r\nimport com.comp3350_group10.bookstore.application.Main;\r\nimport com.comp3350_group10.bookstore.application.Service;\r\nimport com.comp3350_group10.bookstore.business.UI_Handler.ErrorHandler;\r\nimport com.comp3350_group10.bookstore.business.UI_Handler.IErrorHandler;\r\nimport com.comp3350_group10.bookstore.objects.User;\r\nimport com.comp3350_group10.bookstore.persistence.IUser;\r\nimport com.comp3350_group10.bookstore.persistence.IUserDatabase;\r\nimport com.comp3350_group10.bookstore.persistence.UserType;\r\nimport com.comp3350_group10.bookstore.persistence.hsqldb.UserDatabase;\r\n\r\n\r\npublic class UserDataHandler implements IUserDataHandler {\r\n\r\n    public static IUser currentUser = null;\r\n    private IUserDatabase userDatabase = new UserDatabase(Main.getDBPath());\r\n\r\n    public UserDataHandler(){\r\n        userDatabase = Service.setupUserDatabase();\r\n    }\r\n\r\n    public UserDataHandler(User currentUser){\r\n        UserDataHandler.currentUser =currentUser;\r\n    }\r\n\r\n\r\n    //function to check whether the current user is a manager or employee\r\n    public boolean isCurrentUserManager(){\r\n        return (UserType.Manager == currentUser.getUserType());\r\n    }\r\n\r\n    //function to login the current user\r\n    public void logIn(String email, String password) throws ClassNotFoundException {\r\n\r\n        IUser tempUser = userDatabase.findUser(email);\r\n\r\n        try{\r\n            //check if the user is in the database or not\r\n            if(tempUser == null) {\r\n                throw new Exception(\"Password length too short, should be at least 8 characters\");\r\n            }\r\n            else {\r\n                try{\r\n                    //check if the given password matches the tempUser's password\r\n                    if(!tempUser.getPassword().equals(password)){\r\n                        throw new Exception(\"Different passwords, couldn't confirm!!\");\r\n                    }\r\n                    else {\r\n                        //if password matches, then update the currentUser\r\n                        currentUser = tempUser;\r\n                    }\r\n                }\r\n                catch (Exception g){\r\n                    System.out.println(g);\r\n                }\r\n            }\r\n        }\r\n        catch (Exception f){\r\n            System.out.println(f);\r\n        }\r\n    }\r\n\r\n    //function to logout the current user\r\n    public void logOut(){\r\n        if(currentUser!=null)\r\n            currentUser = null;\r\n    }\r\n\r\n    //function to change password for the current logged in user\r\n    public void changePassword(String oldPw, String newPw, String confirmNewPw){\r\n        try {\r\n            //check if the user is logged in or not\r\n            if(currentUser == null){\r\n                IErrorHandler.ShowLoginErrorMessage(\"There is no currently logged in user\");\r\n                throw new Exception(\"User must be logged in\");\r\n            }\r\n            else {\r\n                try {\r\n                    //check if the current password matches the old password\r\n                    if(!currentUser.getPassword().equals(oldPw)){\r\n                        throw new Exception(\"Current password doesn't match the saved password\");\r\n                    }\r\n                    else {\r\n                        try{\r\n                            //check if the new password length is at least 8 characters (validation)\r\n                            if(newPw.length()<8) {\r\n                                throw new Exception(\"Password length too short, should be at least 8 characters\");\r\n                            }\r\n                            else {\r\n                                try{\r\n                                    //check if the new password is confirmed or not\r\n                                    if(!newPw.equals(confirmNewPw)){\r\n                                        throw new Exception(\"Different passwords, couldn't confirm!!\");\r\n                                    }\r\n                                    else {\r\n                                        //if everything is correct, then update the password\r\n                                        currentUser.setPassword(newPw);\r\n                                        userDatabase.updateUser(currentUser);\r\n                                    }\r\n                                }\r\n                                catch (Exception g){\r\n                                    System.out.println(g);\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (Exception f){\r\n                            System.out.println(f);\r\n                        }\r\n                    }\r\n                }\r\n                catch (Exception e){\r\n                    System.out.println(e);\r\n                }\r\n\r\n            }\r\n        }\r\n        catch (Exception h){\r\n            System.out.println(h);\r\n        }\r\n    }\r\n\r\n\r\n    // TODO: Take care of IUserDatabase bugs after it's implemented\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/UserDataHandler.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/business/Data_Handler/UserDataHandler.java	(date 1616554539588)
@@ -1,8 +1,5 @@
 package com.comp3350_group10.bookstore.business.Data_Handler;
 
-import com.comp3350_group10.bookstore.application.Main;
-import com.comp3350_group10.bookstore.application.Service;
-import com.comp3350_group10.bookstore.business.UI_Handler.ErrorHandler;
 import com.comp3350_group10.bookstore.business.UI_Handler.IErrorHandler;
 import com.comp3350_group10.bookstore.objects.User;
 import com.comp3350_group10.bookstore.persistence.IUser;
@@ -14,10 +11,10 @@
 public class UserDataHandler implements IUserDataHandler {
 
     public static IUser currentUser = null;
-    private IUserDatabase userDatabase = new UserDatabase(Main.getDBPath());
+    private IUserDatabase userDatabase = new UserDatabase("");
 
     public UserDataHandler(){
-        userDatabase = Service.setupUserDatabase();
+
     }
 
     public UserDataHandler(User currentUser){
Index: app/src/main/java/com/comp3350_group10/bookstore/application/Main.java
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/application/Main.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/application/Main.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
@@ -1,23 +0,0 @@
-package com.comp3350_group10.bookstore.application;
-
-public class Main {
-    private static String dbName="BS";
-
-    public static void setDBPath(final String name) {
-        try {
-            Class.forName("org.hsqldb.JDBCDriver").newInstance();
-        } catch (InstantiationException e) {
-            e.printStackTrace();
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (ClassNotFoundException e) {
-            e.printStackTrace();
-        }
-        dbName = name;
-    }
-
-    public static String getDBPath() {
-        return dbName;
-    }
-
-}
Index: app/src/main/java/com/comp3350_group10/bookstore/application/Service.java
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/application/Service.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
+++ app/src/main/java/com/comp3350_group10/bookstore/application/Service.java	(revision 43e9693b06d66b48ae806ed946f116172fb96d9d)
@@ -1,33 +0,0 @@
-package com.comp3350_group10.bookstore.application;
-
-import com.comp3350_group10.bookstore.persistence.IBookDatabase;
-import com.comp3350_group10.bookstore.persistence.IUserDatabase;
-import com.comp3350_group10.bookstore.persistence.hsqldb.BookDatabase;
-import com.comp3350_group10.bookstore.persistence.hsqldb.UserDatabase;
-
-public class Service {
-    private static boolean bookHsqlActivated = false;
-    private static boolean userHsqlActivated = false;
-
-    private static IBookDatabase bookPersistance = null;
-    private static IUserDatabase userPersistance = null;
-
-    public static synchronized IBookDatabase setupBookDatabase(){
-        //if not activated the database, we will instantiate that
-        if(bookHsqlActivated==false){
-            bookPersistance = new BookDatabase();
-            bookHsqlActivated=true;
-        }
-        return bookPersistance;
-    }
-
-    public static synchronized IUserDatabase setupUserDatabase(){
-        if(userHsqlActivated==false){
-            userPersistance = new UserDatabase(Main.getDBPath());
-            userHsqlActivated=true;
-        }
-        return userPersistance;
-    }
-
-
-}
