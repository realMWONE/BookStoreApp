Index: app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeUserDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.comp3350_group10.bookstore.persistence.fakeDB;\n\nimport com.comp3350_group10.bookstore.objects.User;\nimport com.comp3350_group10.bookstore.persistence.IUser;\nimport com.comp3350_group10.bookstore.persistence.IUserDatabase;\nimport com.comp3350_group10.bookstore.persistence.UserType;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FakeUserDatabase implements IUserDatabase {\n    private final List<IUser> userList = new ArrayList<>();\n\n    public FakeUserDatabase(){\n        userList.add(new User(\"Kevin\",\"Kevin@gmail.com\",\"12345678\", UserType.Manager));\n        userList.add(new User(\"Harshal\",\"Harshall@umanitoba.ca\",\"12345678\",UserType.Manager));\n        userList.add(new User(\"Matt\",\"Matt@yahoo.com\",\"12345678\",UserType.Employee));\n        userList.add(new User(\"Daniel\",\"duy.than@gihot.com\",\"12345678\",UserType.Employee));\n        userList.add(new User(\"Animesh\",\"Animesh@outlook.com\",\"12345678\",UserType.Employee));\n        userList.add(new User(\"Darwait\",\"Darwait@gmail.com\",\"12345678\",UserType.Employee));\n    }\n\n    @Override\n    public IUser findUser(String userId) throws ClassNotFoundException {\n        IUser user = null;\n        if(userList.size()>0){\n            for(int i=0;i<userList.size();i++){\n                if(userList.get(i).getUserID().toLowerCase().equals(userId))\n                    user = userList.get(i);\n            }\n        }\n        return user;\n    }\n\n    @Override\n    public IUser createUser(IUser user) throws ClassNotFoundException {\n        userList.add(user);\n        return user;\n    }\n\n    @Override\n    public IUser updateUser(IUser user) throws ClassNotFoundException {\n        for(IUser u:userList){\n            if(u.getUserID().equals(user.getUserID())) {\n                u = user;\n                return u;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public void deleteUser(IUser user) throws ClassNotFoundException {\n        for(IUser u:userList){\n            if(u.getUserID().equals(user.getUserID()))\n                userList.remove(u);\n        }\n    }\n}\n
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeUserDatabase.java	(revision 51b158d7e80350252c423a1f37c7284a785e784e)
+++ app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeUserDatabase.java	(date 1617239030000)
@@ -33,7 +33,7 @@
     }
 
     @Override
-    public IUser createUser(IUser user) throws ClassNotFoundException {
+    public IUser insertUser(IUser user) throws ClassNotFoundException {
         userList.add(user);
         return user;
     }
Index: app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeBookDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\n * Fake Book Database\n */\npackage com.comp3350_group10.bookstore.persistence.fakeDB;\n\nimport com.comp3350_group10.bookstore.objects.Book;\nimport com.comp3350_group10.bookstore.persistence.IBook;\nimport com.comp3350_group10.bookstore.persistence.IBookDatabase;\nimport com.comp3350_group10.bookstore.R;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FakeBookDatabase implements IBookDatabase {\n    //List for our book database which would store the list of Book objects\n    final private List<IBook> bookList= new ArrayList<>();;\n\n    //Constructor\n    public FakeBookDatabase() {\n        //Calling createDatabase method here so every time the BookDatabase object is created it would have all the data loaded into it\n        createDatabase();\n    }\n\n    /**\n     * createDatabase: Populates the database by adding new book objects with information about the books into the list\n     */\n    private void createDatabase(){\n        bookList.add(new Book(\"Harry Potter and the Philosopher's Stone\",\"5648304756357\",12,2630,\"26 June 1997\",\"J.K.Rowling\",\"Novel\",2,R.drawable.philosophers_stone));\n        bookList.add(new Book(\"Harry Potter and the Chamber of Secrets\",\"3820484736373\",14,2640,\"21 April 1998\",\"J.K.Rowling\",\"Novel\",5,R.drawable.harry_potter_and_the_chamber_of_secrets));\n        bookList.add(new Book(\"The Da Vinci Code\",\"0218574629654\",10,2780,\"21 October 2007\",\"Dan Brown\",\"Mystery\",3,R.drawable.the_da_vinci_code));\n        bookList.add(new Book(\"Angels and Demons\",\"2865926595295\",11,2780,\"15 June 2009\",\"Dan Brown\",\"Mystery\",5,R.drawable.angels_demons));\n        bookList.add(new Book(\"Diary of Wimpy Kid: The Getaway\",\"5987450215825\",13,1250,\"16 January 2005\",\"Jeff Kinney\",\"Comedy\",4, R.drawable.diary_of_wimpy_kid_the_getaway));\n        bookList.add(new Book(\"Diary of Wimpy Kid: Double Down\",\"4578932145250\",12,1280,\"21 February 2006\",\"Jeff Kinney\",\"Comedy\",3,R.drawable.diary_of_wimpy_kid_double_down));\n        bookList.add(new Book(\"Harry Potter and the Prisoner of Azkaban\",\"6003255121507\",14,2680,\"22 March 1999\",\"J.K.Rowling\",\"Novel\",2,R.drawable.prisoner_of_azkaban));\n        bookList.add(new Book(\"Harry Potter and the Goblet of Fire\",\"6783908521508\",13,2680,\"06 June 2001\",\"J.K.Rowling\",\"Novel\",5,R.drawable.harry_potter_and_the_goblet_fire));\n        bookList.add(new Book(\"Harry Potter and the Order of Phoenix\",\"6588503121509\",12,2680,\"01 April 2003\",\"J.K.Rowling\",\"Novel\",4,R.drawable.harry_potter_and_the_order_of_the_phoenix));\n        bookList.add(new Book(\"Harry Potter and the Half-Blood Prince\",\"6654684858510\",11, 2680,\"03 July 2005\",\"J.K.Rowling\",\"Novel\",3,R.drawable.harry_potter_and_the_half_blood_prince));\n        bookList.add(new Book(\"Harry Potter and the Deathly Hallows\",\"6874684025221\",10,2680,\"25 March 2007\",\"J.K.Rowling\",\"Novel\",6,R.drawable.harry_potter_and_the_deathly_hallows));\n        bookList.add(new Book(\"Harry Potter and the Cursed Child\",\"5354684656848\",2,2680,\"21 March 2009\",\"J.K.Rowling\",\"Novel\",5,R.drawable.harry_potter_and_the_cursed_child));\n        bookList.add(new Book(\"Twilight\",\"2510323255565\",3,2730,\"22 March 2005\",\"Stephenie Meyer\",\"Romance\",4,R.drawable.twilight));\n        bookList.add(new Book(\"Eclipse\",\"2551819816185\",2,2780,\"07 April 2008\",\"Stephenie Meyer\",\"Romance\",3,R.drawable.eclipse));\n        bookList.add(new Book(\"New Moon\",\"2516511685000\",4,2780,\"23 February 2010\",\"Stephenie Meyer\",\"Romance\",3,R.drawable.new_moon));\n        bookList.add(new Book(\"Breaking Dawn\",\"2051512546452\",  7, 2230, \"20 April 2020\",\"Stephenie Meyer\", \"Novel\", 1,R.drawable.breaking_dawn));\n        bookList.add(new Book(\"Midnight Sun\",\"2510018982862\", 3, 2230, \"20 April 2020\", \"Stephenie Meyer\", \"Novel\", 1,  R.drawable.midnightsun));\n        bookList.add(new Book(\"The Lord of The Rings, The Fellowship of the Ring\",\"2500186257772\", 5, 2030, \"20 April 2020\",\"J. R. R. Tolkien\",  \"Novel\" ,89, R.drawable.lotr));\n        bookList.add(new Book(\"The Lord of The Rings, The Two Towers\",\"2500114562233\", 12, 2030,  \"20 April 2020\", \"J. R. R. Tolkien\", \"Novel\" , 64, R.drawable.the_two_towers));\n        bookList.add(new Book(\"The Book of Lost Tales\",\"2500885265433\",13, 2030,\"20 April 2020\", \"J. R. R. Tolkien\", \"Novel\" , 420, R.drawable.the_book_of_lost_tails));\n        bookList.add(new Book(\"The Children of HÃºrin\",\"2369852102742\", 2, 2030, \"20 April 2020\" ,\"J. R. R. Tolkien\", \"Novel\", 69,R.drawable.the_children_of_hurin));\n\n    }\n\n\n    /**\n     * findBooks: Finds and returns the book objects based on their book ISBN\n     * @param searchTerm\n     * @return\n     */\n    public List<IBook> findBook(String searchTerm) {\n\n        //Lists which contains book objects related to specific search terms\n        List<IBook> findByISBN = findByISBN(searchTerm);\n        List<IBook> findByAuthor = findByAuthor(searchTerm);\n        List<IBook> findByTitle = findByTitle(searchTerm);\n\n        //Filtering by removing duplicates and adding them all into a single list which has elements of the search term\n        List<IBook> bookResult = new ArrayList<>();\n\n        for(IBook book: findByISBN){\n            if(!bookResult.contains(book)){\n                bookResult.add(book);\n            }\n        }\n        for(IBook book: findByAuthor){\n            if(!bookResult.contains(book)){\n                bookResult.add(book);\n            }\n        }\n        for(IBook book: findByTitle){\n            if(!bookResult.contains(book)){\n                bookResult.add(book);\n            }\n        }\n\n        return bookResult;\n    }\n\n    @Override\n    public List<IBook> getBooks() throws ClassNotFoundException {\n        return bookList;\n    }\n\n    @Override\n    public void insertBook(IBook book) throws ClassNotFoundException {\n        if(!bookList.contains(book))\n        {\n            bookList.add(book);\n        }\n    }\n\n    @Override\n    public void updateBook(IBook book) throws ClassNotFoundException {\n        if (bookList.contains(book)) {\n            bookList.add(bookList.indexOf(book), book);\n        }\n    }\n\n    @Override\n    public void deleteBook(IBook book) throws ClassNotFoundException {\n        bookList.remove(book);\n    }\n\n    /**\n     * findByISBN: Finds books from our bookList by ISBN\n     * @param isbn\n     */\n    private List<IBook> findByISBN(String isbn){\n        List<IBook> bookIsbn = new ArrayList<>();\n        if(isbn != null){\n            //Going through all the bookList\n            for(IBook book: bookList){\n                //If the string inputted matches any of the strings in the our bookList, then add that to our local list\n                if(book.getBookIsbn().startsWith(isbn)){\n                    bookIsbn.add(book);\n                }\n            }\n        }\n        return bookIsbn;\n    }\n\n    /**\n     * findByAuthor: Finds books from our bookList by author\n     * @param author\n     */\n    private List<IBook> findByAuthor(String author){\n        List<IBook> bookAuthor = new ArrayList<>();\n        String[] split;\n        if(author != null){\n            //Going through all the bookList\n            for(IBook book: bookList) {\n                //***CHANGED***:\n                // now instead of pulling whole string and try to match with the search term,\n                // we split the term by delimeters and try to match each search term with each data term\n                //e.g. \"J. K. Rowling\" now becomes \"J\", \"K\", \"Rowling\" so if we search \"Rowling\" it now matches\n                split = book.getBookAuthor().toLowerCase().split(\"[-. ,:]+\");\n                for(String splitTerm: split){\n                    //If the string inputted matches any of the terms in the book's author name, then add that book to our return list\n                    if (splitTerm.startsWith(author)) {\n                        bookAuthor.add(book);\n                    }\n                }\n            }\n        }\n        return bookAuthor;\n    }\n\n    /**\n     * findByTitle: Finds books from our bookList by title\n     * @param title\n     */\n    private List<IBook> findByTitle(String title){\n        List<IBook> bookTitle = new ArrayList<>();\n        String[] split;\n\n        if(title != null){\n            //Going through all the bookList\n            for(IBook book: bookList) {\n                //***CHANGED***: see findByAuthor for detail\n                split = book.getBookName().toLowerCase().split(\"[-. ,:]+\");\n                for(String splitTerm: split){\n                    //If the string inputted matches any of the terms in the book titles, then add the book to our return list\n                    if (splitTerm.startsWith(title)) {\n                        bookTitle.add(book);\n                    }\n                }\n            }\n        }\n        return bookTitle;\n    }\n}\n
===================================================================
--- app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeBookDatabase.java	(revision 51b158d7e80350252c423a1f37c7284a785e784e)
+++ app/src/main/java/com/comp3350_group10/bookstore/persistence/fakeDB/FakeBookDatabase.java	(date 1617239083000)
@@ -91,18 +91,20 @@
     }
 
     @Override
-    public void insertBook(IBook book) throws ClassNotFoundException {
+    public IBook insertBook(IBook book) throws ClassNotFoundException {
         if(!bookList.contains(book))
         {
             bookList.add(book);
         }
+        return book;
     }
 
     @Override
-    public void updateBook(IBook book) throws ClassNotFoundException {
+    public IBook updateBook(IBook book) throws ClassNotFoundException {
         if (bookList.contains(book)) {
             bookList.add(bookList.indexOf(book), book);
         }
+        return book;
     }
 
     @Override
